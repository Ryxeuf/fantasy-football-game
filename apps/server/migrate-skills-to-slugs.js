/**
 * Script de migration pour convertir les comp√©tences des joueurs
 * des noms anglais vers les slugs
 * 
 * Usage: node migrate-skills-to-slugs.js
 */

const { PrismaClient } = require("@prisma/client");
const { convertNamesToSlugs } = require("@bb/game-engine");

const prisma = new PrismaClient();

async function migrateSkillsToSlugs() {
  console.log("üîÑ D√©but de la migration des comp√©tences vers les slugs...\n");

  try {
    // R√©cup√©rer tous les joueurs
    const players = await prisma.teamPlayer.findMany({
      select: {
        id: true,
        name: true,
        position: true,
        skills: true,
      },
    });

    console.log(`üìä ${players.length} joueurs trouv√©s\n`);

    let migratedCount = 0;
    let unchangedCount = 0;
    let errorCount = 0;

    for (const player of players) {
      try {
        const oldSkills = player.skills || "";
        
        // Ignorer les joueurs sans comp√©tences
        if (!oldSkills || oldSkills.trim() === "") {
          unchangedCount++;
          continue;
        }

        // V√©rifier si ce sont d√©j√† des slugs (contiennent des tirets)
        const hasHyphens = oldSkills.includes("-");
        const hasCommasWithoutSpaces = oldSkills.includes(",") && !oldSkills.includes(", ");
        
        if (hasHyphens || hasCommasWithoutSpaces) {
          // Probablement d√©j√† des slugs
          console.log(`‚è≠Ô∏è  Joueur ${player.name} (${player.position}): d√©j√† migr√©`);
          unchangedCount++;
          continue;
        }

        // Convertir les noms vers les slugs
        const newSkills = convertNamesToSlugs(oldSkills);

        // Si pas de changement, ignorer
        if (oldSkills === newSkills) {
          unchangedCount++;
          continue;
        }

        // Mettre √† jour en base de donn√©es
        await prisma.teamPlayer.update({
          where: { id: player.id },
          data: { skills: newSkills },
        });

        console.log(`‚úÖ Joueur ${player.name} (${player.position}):`);
        console.log(`   Avant: "${oldSkills}"`);
        console.log(`   Apr√®s: "${newSkills}"\n`);
        
        migratedCount++;
      } catch (error) {
        console.error(`‚ùå Erreur pour le joueur ${player.name}:`, error.message);
        errorCount++;
      }
    }

    console.log("\nüìà R√©sum√© de la migration:");
    console.log(`   ‚úÖ Joueurs migr√©s: ${migratedCount}`);
    console.log(`   ‚è≠Ô∏è  Joueurs inchang√©s: ${unchangedCount}`);
    console.log(`   ‚ùå Erreurs: ${errorCount}`);
    console.log(`   üìä Total: ${players.length}`);

    if (migratedCount > 0) {
      console.log("\n‚ú® Migration termin√©e avec succ√®s !");
    } else {
      console.log("\n‚ÑπÔ∏è  Aucune migration n√©cessaire, tous les joueurs sont d√©j√† √† jour.");
    }
  } catch (error) {
    console.error("\n‚ùå Erreur fatale lors de la migration:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la migration
if (require.main === module) {
  migrateSkillsToSlugs()
    .then(() => {
      console.log("\n‚úÖ Script termin√©");
      process.exit(0);
    })
    .catch((error) => {
      console.error("\n‚ùå Le script a √©chou√©:", error);
      process.exit(1);
    });
}

module.exports = { migrateSkillsToSlugs };

